{"version":3,"file":"popup.js","mappings":";;;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,yBAAyB,sCAAsC;AACtE;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;UCnBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNyC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,kDAAc;;AAE5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,4CAA4C;AACpD;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,sBAAsB,mCAAmC;AACzD,0CAA0C,sBAAsB,UAAU;AAC1E,GAAG;AACH;;AAEA;AACA,sBAAsB,mCAAmC;AACzD,0CAA0C,cAAc,UAAU;AAClE,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://summary-tts/./src/utils.js","webpack://summary-tts/webpack/bootstrap","webpack://summary-tts/webpack/runtime/define property getters","webpack://summary-tts/webpack/runtime/hasOwnProperty shorthand","webpack://summary-tts/webpack/runtime/make namespace object","webpack://summary-tts/./src/popup.js"],"sourcesContent":["export const initialOptions = {\n  lang: 'en',\n  pitch: 1,\n  rate: 1,\n  voice: 1,\n  volume: 1,\n  showSummary: false,\n};\n\nexport function createElement({ tag = 'div', append = null, ...props }) {\n  let e = document.createElement(tag);\n\n  for (let key in props) {\n    e[key] = props[key];\n  }\n\n  if (append) append.append(e);\n\n  return e;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { initialOptions } from './utils';\n\nconst fileOpenBtn = document.querySelector('#upload-file-btn');\nconst fileInput = document.querySelector('#upload-file');\nconst voiceSelect = document.querySelector('select#voice');\nconst speedRange = document.querySelector('input#rate');\nconst volumeRange = document.querySelector('input#volume');\nconst optionsToggleBtn = document.querySelector('button#options-toggle-btn');\nconst optionInputsDiv = document.querySelector('.options__inputs');\nconst inputs = [voiceSelect, speedRange, volumeRange];\nconst pauseBtn = document.querySelector('#pause-btn');\nconst stopBtn = document.querySelector('#stop-btn');\nconst showSummaryTextCheckbox = document.querySelector('#show-txt-checkbox');\n\nlet options = initialOptions;\n\n// HTTPS REQUESTS\n//TODO: showing loading state\nasync function extractFileText() {\n  const data = new FormData();\n  data.append('input_file', fileInput.files[0], fileInput.files[0].name);\n  data.append('language', 'english');\n\n  const options = {\n    method: 'POST',\n    headers: {\n      'X-RapidAPI-Key': 'ae3e795ee7msh35e5ba83e704f20p12babcjsnc1e1876e52a7',\n      'X-RapidAPI-Host': 'text-analysis12.p.rapidapi.com',\n    },\n    body: data,\n  };\n\n  try {\n    let response = await fetch(\n      'https://text-analysis12.p.rapidapi.com/text-mining/api/v1.1',\n      options\n    );\n    let data = await response.json();\n\n    chrome.runtime.sendMessage(\n      { type: 'GET_SUMMARY_POPUP', text: data.text },\n      (response) => {\n        console.log(response);\n        window.close();\n      }\n    );\n  } catch (err) {\n    console.error('cannot extract text');\n  }\n}\n\n// OPTIONS HANDLING\nchrome.storage.local.get(['options', 'settings'], (value) => {\n  if (value.options) {\n    options = value.options;\n    inputs.forEach((input) => {\n      let inputId = input.id;\n      input.value = +options[inputId];\n    });\n  }\n\n  if (value.options?.showSummary) {\n    showSummaryTextCheckbox.checked = Boolean(value.options.showSummary);\n  }\n});\n\n// EVENT HANDLERS\nfunction fileInputClickHandler() {\n  fileInput.click();\n}\nfunction toggleOptions() {\n  optionInputsDiv.classList.toggle('active');\n}\n\nfunction onValueChange(e) {\n  let changed = e.target.attributes.id.nodeValue;\n  options = {\n    ...options,\n    [changed]: Math.floor(e.target.value) || e.target.value,\n  };\n  chrome.storage.local.set({\n    options: options,\n  });\n}\n\nfunction togglePause() {\n  chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n    chrome.tabs.sendMessage(tabs[0].id, { type: 'TOGGLE_PAUSE' }, () => {});\n  });\n}\n\nfunction stopSpeech() {\n  chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n    chrome.tabs.sendMessage(tabs[0].id, { type: 'STOP' }, () => {});\n  });\n}\n\nfunction textVisiblityChangeHandler(e) {\n  //! Overrides all settings\n  const shouldShowSummary = e.target.checked;\n\n  options = {\n    ...options,\n    showSummary: shouldShowSummary,\n  };\n  chrome.storage.local.set({\n    options: options,\n  });\n}\n\n// EVENT LISTENERS\nfileOpenBtn.addEventListener('click', fileInputClickHandler);\nfileInput.addEventListener('change', extractFileText);\noptionsToggleBtn.addEventListener('click', toggleOptions);\npauseBtn.addEventListener('click', togglePause);\nstopBtn.addEventListener('click', stopSpeech);\nshowSummaryTextCheckbox.addEventListener('change', textVisiblityChangeHandler);\ninputs.forEach((input) => {\n  input.addEventListener('change', onValueChange);\n});\n"],"names":[],"sourceRoot":""}